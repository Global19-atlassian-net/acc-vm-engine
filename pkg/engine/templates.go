// Code generated for package engine by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../parts/base.t
// ../../parts/outputs.t
// ../../parts/params.t
// ../../parts/resources.t
// ../../parts/vars.t
package engine

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _baseT = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xcf\x4a\x04\x31\x0c\xc6\xef\xf3\x14\xa1\x7a\x74\x3b\x53\xc1\xcb\x3c\x87\x78\x11\x0f\xb1\x06\x77\x65\xfa\x87\x24\x5d\xd0\xa1\xef\x2e\x9d\x2d\xba\xb0\x43\x6e\xf9\xe5\xf7\x7d\x59\x07\x00\x73\x2f\xfe\x48\x01\xcd\x0c\xe6\xa8\x9a\x65\x1e\xc7\xcb\xc6\x06\x8c\xf8\x49\x81\xa2\x5a\xfc\x29\x4c\xd6\xa7\xd0\x99\x8c\x8f\x93\x7b\x3a\x4c\xee\x30\xb9\xf1\x83\xf2\x92\xbe\xdb\xdd\x33\x85\xbc\xa0\x92\xfd\x92\x14\xef\xcc\x43\xcb\xf7\x29\x2a\x45\x7d\x21\x96\x53\x8a\xad\xc6\xd9\xa9\xcd\x05\x67\x64\x0c\xa4\xc4\x62\x66\x68\x0f\x01\xac\xab\xf6\x9c\x8e\xc5\xaa\x01\x5b\xeb\x00\x50\x37\xe9\x8c\x7c\xc2\xf7\x85\xf6\x9d\x33\xf2\x8d\xc1\x24\xa9\xb0\xdf\x8c\xd7\x1b\xe3\x8f\xfe\x6b\x6f\x9b\x96\x8a\xe6\xa2\xfb\x35\x9d\x5d\x35\x0d\x75\xf8\x0d\x00\x00\xff\xff\x73\x84\xae\x0d\x53\x01\x00\x00")

func baseTBytes() ([]byte, error) {
	return bindataRead(
		_baseT,
		"base.t",
	)
}

func baseT() (*asset, error) {
	bytes, err := baseTBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base.t", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _outputsT = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x50\x50\x4a\x4c\xc9\xcd\xcc\x0b\x2d\x4e\x2d\xca\x4b\xcc\x4d\x55\xb2\x52\xa8\xe6\x52\x50\x50\x50\x50\x2a\xa9\x2c\x00\xf1\x94\x8a\x4b\x8a\x32\xf3\xd2\x95\x74\x20\xa2\x65\x89\x39\xa5\x60\xe1\xe8\x82\xc4\xa2\xc4\xdc\xd4\x92\xd4\xa2\x62\x0d\x75\x14\x23\xd4\x35\x63\x95\xb8\x14\x14\x6a\xb9\x00\x01\x00\x00\xff\xff\xe6\xc7\xec\x89\x5c\x00\x00\x00")

func outputsTBytes() ([]byte, error) {
	return bindataRead(
		_outputsT,
		"outputs.t",
	)
}

func outputsT() (*asset, error) {
	bytes, err := outputsTBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "outputs.t", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _paramsT = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x97\x4d\x4f\xe3\x48\x10\x86\xef\xfb\x2b\x4a\xbe\x0c\x48\x59\x0e\xa3\xd5\x1e\xb8\xb1\x62\x84\x56\x84\x0f\xc5\x24\x17\x84\x56\x85\x5d\x89\x5b\xd8\xdd\x56\x57\x75\x02\x13\xe5\xbf\xaf\xda\x8e\x13\x87\xc9\x87\xed\xb0\x39\x2c\x27\xd4\xee\xaa\x7a\xde\xb7\xcb\x95\x36\x00\x40\x90\x9a\x08\x45\x19\x1d\x5c\xc2\xfc\x37\x28\xfe\x02\xf9\xc8\x29\xb8\x84\x80\xc5\x2a\x3d\x09\x7a\xd5\x7a\x4c\x63\x74\xa9\x8c\x30\x75\xc5\xf3\x67\x4b\x6c\x9c\x8d\xe8\xc6\x1a\x97\x9f\x9d\x5f\x54\xc9\x5e\x56\x31\xf3\xf9\x0d\xc9\x55\x9a\x9a\x19\xc5\xfd\xe5\x53\x5e\x2c\xaa\x8c\x19\x09\xc6\x28\x58\xab\x5e\xd4\xe1\xc8\xaa\x7c\x89\x15\x54\x71\x30\x36\x16\x30\x4d\xa1\x2a\xcb\x17\xc1\x32\xa8\x4c\xb8\x28\xab\x06\xd3\xec\x1e\x33\x6a\xa2\xa8\x51\x7d\x9f\x0c\xcc\x18\x24\x21\x18\xdd\xed\xac\x19\xaa\x9f\x4d\x6a\xd6\x1d\x19\xdd\xf9\xa0\xb6\x7e\xf8\x98\x83\x3c\xe8\x24\x21\x2d\xaa\xb4\xee\xa9\x64\x69\x7d\xc2\x39\x32\xcf\x8c\x8d\xd7\x3b\x70\x49\xee\x77\x70\x70\x09\xcf\x6b\xcc\x5f\x36\x03\x04\xcc\xc9\xa3\x7b\x4d\x55\x74\x4b\x1f\x15\xe8\x4b\x3b\xfb\x3d\xbb\x97\xbb\xa9\x08\xc4\x80\x63\x02\xa3\xa1\xaf\xb4\x7b\x87\xa9\xb2\xe2\x30\x85\x0c\xa3\x44\x69\xda\x65\x4b\x9c\x29\x3d\x64\xb2\xba\x61\x87\x7c\x76\x04\x7f\x3a\x4b\x8e\xc9\xb6\x6c\xa2\xaa\x66\xd1\xc4\xc5\xc9\x2d\x79\xef\x0e\xf3\x3e\x56\xc6\x6e\xe3\xa5\xc8\x59\x3a\x44\xdd\x12\xb6\x2a\xd8\x12\xd6\xf0\xdf\x19\x4e\xa8\x38\x70\x4e\xc8\x76\xf1\xb7\x25\xe9\x43\x08\xca\xd7\x84\xbc\x2a\xba\x9f\xed\x61\x3c\x3e\x2d\x97\xf1\x05\xf7\x33\x85\xb7\xc3\x53\x12\x85\xb7\xc3\xfd\x3c\x23\xb2\xdc\xf1\x17\x21\x45\x21\x96\xae\x64\xd3\xb2\xf0\x7e\xba\xe1\xa0\x7f\x4a\xb7\x86\x83\xfe\x4e\x9e\x6b\xc5\x6f\x0d\x27\x6b\x31\xf5\x1f\x56\x11\x6d\x47\x7e\x35\x03\x33\xd4\x38\xa1\x18\x62\xc5\x6f\x7e\x02\x46\x96\x50\x76\xbd\x8e\x53\x4d\x72\x4f\xb3\x07\xfb\xe3\x5d\xb1\x78\x9a\x0e\xbe\x69\x9a\x35\x1a\xfe\xf5\x7d\x00\x01\x55\x25\xbb\xcd\xfc\x6b\x12\xb2\x99\xd2\xc4\x30\x4b\x48\x12\xb2\x60\x2c\x68\x23\x80\xa0\x69\xb6\x1a\xf6\x9a\x64\x66\xec\x1b\x70\x62\x5c\x1a\xc3\x2b\x41\x6e\xcd\x54\xf9\x2e\xa2\x78\x8f\x2b\x1d\x87\xff\x73\x64\x74\x84\x72\xf6\xf9\xde\xe3\x07\x7b\x0f\xbe\xfd\xee\x73\x7f\x3b\x7f\x39\xe2\x7e\xf1\x59\xd8\x19\xa6\x79\x82\xda\x65\x64\x55\xd4\x83\xe4\x23\x4f\x48\xf7\xc0\xe9\x98\x2c\x47\xc6\x52\x0f\x72\xb2\xca\xc4\xe7\xeb\x26\x58\x57\x57\xba\x4f\x7a\x22\x49\x70\x09\xdf\xd7\xab\xf8\xbe\x5a\xfd\xf3\x8f\x5f\xbc\x19\xd4\xb5\x75\x36\x6a\x9b\x43\xc7\xf8\x52\xe5\x83\x89\x4f\xb8\xfa\x5d\xaa\xda\xec\xb3\x6f\x7b\xde\x88\xab\x38\xb6\xc4\xdc\x45\xd5\x7c\x7e\x31\xd2\x24\x8f\xd6\x8c\x55\x4a\xc5\xff\xcb\x6c\x8b\x45\x4b\x6d\xa3\xfb\x1f\x4f\x80\x65\x30\x70\x8e\x11\x6d\x27\x66\xf7\xfa\x1f\xf6\x6b\x99\xfd\xb8\x8e\x2d\x73\xec\x30\xbc\x7c\xf8\x75\x96\x87\xf5\x7c\xad\x4d\x0f\x49\xb8\xc6\x7c\xf0\x0e\x5d\xde\xad\xfe\x32\x46\xba\xa0\x8b\x75\xd4\x68\x74\x6e\x6c\xf4\x0b\x63\x4c\x99\x3a\x4e\xce\xb0\x60\x06\x0f\x0d\x4c\x52\xbc\x1c\x07\xbf\x5d\x9e\x1e\xef\x4e\xa9\xf0\x28\x81\x1e\xb6\xb1\xb2\x57\x63\xe4\x5a\xe1\x44\x1b\x16\x15\x75\xea\xc0\x92\xf5\xd4\x2a\x8b\xf3\x8b\xd7\xe4\x8d\x15\xd7\x62\x42\x31\x16\x27\x74\x15\x45\xc6\xe9\xff\xeb\x4d\x80\x4b\x91\x80\xa5\xca\xed\x37\x81\xd6\x5e\x75\x9c\xb7\xda\x68\x3a\x62\x94\x6e\x9c\xf7\xa6\xae\xb6\x0a\xba\x7e\xf0\x87\x82\x3a\x46\x1b\xff\xd3\x1f\x84\x8d\x4e\x7b\x6b\x40\x7d\xfd\x66\x10\x1e\xf9\xe1\xff\x85\xb6\xdc\x2a\xbd\xfd\x2b\xfa\xa0\x2d\x45\x96\x86\x8e\x6c\xee\x5d\x2f\x8d\xbe\x77\x74\xc2\x63\xb7\x74\xe2\xdf\x00\x00\x00\xff\xff\xff\x2c\xdd\xe5\xdd\x13\x00\x00")

func paramsTBytes() ([]byte, error) {
	return bindataRead(
		_paramsT,
		"params.t",
	)
}

func paramsT() (*asset, error) {
	bytes, err := paramsTBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "params.t", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesT = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\xdb\x6e\xdb\x38\x13\xbe\xcf\x53\x10\xfa\x7f\x40\x0e\x20\x9f\x02\xec\x6e\x9b\xbb\x6e\x13\x64\x8d\x8d\x53\x23\x4a\xb3\x17\x41\xb0\xa0\xc9\xb1\xc3\x46\x22\x55\x92\x72\xe2\x18\x7e\xf7\x05\x75\xb0\x4e\x94\x6c\x6f\xb2\xed\x85\x6b\x73\x66\x38\xf3\x7d\x73\x62\x11\x42\x68\x73\x82\x92\x3f\x0e\x8e\xd8\x3d\x48\xc5\x04\x77\xce\x91\x73\x36\x1a\x7f\xea\x8f\x7e\xe9\x8f\xc6\x8e\x97\x4b\x70\x1c\x82\x39\x7b\x20\x82\x13\xac\x7b\xee\x2d\x28\x11\x4b\x02\x57\x52\xc4\xd1\x05\x44\x81\x58\x87\xc0\x75\xdf\xf5\x50\xcc\xd9\xcf\x18\x7c\x2d\x19\x5f\xf6\xe8\xee\xa8\x77\x3a\x30\x56\x4e\x4f\x1f\x0b\xb3\x7a\x1d\x25\x66\xa7\x8c\x48\xa1\xc4\x42\x0f\x72\xbb\x6a\x58\x68\xaa\x42\x21\x92\x22\x02\xa9\x19\x28\xe7\x7c\xe7\x3f\x42\x4e\x28\x68\x62\x68\xc2\x89\x04\xa3\x83\x83\x9d\x92\xb9\x07\xc2\x28\xc0\x1a\x2a\x4a\x08\x39\xff\x57\xe4\x09\x42\x6c\x34\x9f\xb4\x8e\xd4\xf9\x70\x98\xfe\x32\x08\x31\xc7\xcb\xc4\xd2\x00\xbf\xc5\x12\x06\x44\x84\xd9\x99\x1a\x9e\x8d\xc6\x06\x9e\xfe\x68\x5c\xf2\xf2\x2e\xbb\x63\xf0\x43\x09\xfe\xbf\xd2\xed\x08\x39\x44\x70\x0d\x5c\x97\x40\x1e\x0f\x46\xe6\x6f\x55\x4c\xe6\xc1\x3b\xe7\xe8\xe1\x71\x77\xb2\x3d\x29\x7f\x6e\x53\x95\x4d\x3b\x86\x37\xa0\x5f\x84\x7c\x1e\x46\xf1\x3c\x60\x64\x32\xfb\x42\xa9\x04\xa5\xa0\x84\x63\x83\xf1\xcf\xfd\xd1\x99\x9d\xf1\x15\x96\x0c\xcf\x03\x50\x3d\xb7\x66\xf0\x06\x87\xe0\x96\xe9\x0c\x04\xc1\x3a\xb3\xf9\x10\x61\x89\x43\xd0\x20\x55\xcf\xcd\x0f\x2a\xd2\x35\x2e\x37\x1b\xb6\x40\x7f\x60\x75\x71\xe3\x1b\xc3\x68\xb0\xdd\x16\x04\x52\xae\x7c\xd0\x9a\xf1\xa5\xaa\x73\x48\x45\x88\x19\x37\x2a\xd7\x78\x0e\x41\xe3\xee\x55\x98\xfb\x59\x00\xea\x9d\x6c\x36\xc0\x69\xf9\x86\x5d\x6c\x41\xee\xec\x14\xf4\x93\xa0\xc6\xde\xc5\x9a\xe3\x90\x11\xe7\x5f\xf2\xc0\xd3\x4f\x1f\x48\x2c\x99\x5e\x27\x25\xf3\x6e\x2e\xb8\x5a\x7e\x2c\xfe\x3b\x24\x54\xe6\xe7\x6d\x1c\xa4\x99\x58\x42\x7b\xb3\xb9\x02\xed\x97\x05\xd0\xe0\x7e\x3a\x93\x62\xc1\x02\x18\xcc\x84\xd4\xaa\x04\xea\x63\x27\x60\x44\x70\xca\x76\xee\xc2\xcf\x18\x07\xaa\x57\x61\x8e\x83\xbe\x81\x97\x6f\xf2\xf2\x95\x29\xc3\xbd\x7b\xea\x21\x97\xc3\x8b\xdb\xdd\x43\x72\xdc\x57\x4c\xea\x18\x07\xd9\xd7\x3d\x88\x7f\xb6\x23\xde\xf0\xe7\xbf\xc1\x1c\xa7\x15\xe5\x47\x98\x34\x9a\x54\x76\x36\x93\xb0\x60\xaf\x0d\x46\x90\xc5\xc9\xac\x3e\x2b\x39\x5f\xb0\xb1\x63\x22\x65\x3b\x9e\x73\xd0\x0d\x9e\xab\x37\x58\xe1\x48\x35\xeb\x80\x74\x07\x6a\x0b\xa9\xc5\xb0\x3d\x88\xa2\x1b\x56\xff\xdd\x9d\x6a\x7b\x6b\x73\xc2\x35\xc8\x05\x26\xfb\x7a\xe4\x6f\xfb\xeb\x92\x91\x77\xe6\x08\x85\x08\x38\x55\xdf\x78\x85\x93\x63\x1a\xb1\x2d\x27\x6c\x32\xf6\x76\x92\x09\x3c\xee\x4d\x5a\x16\x7d\x15\x7c\xc1\x96\xb1\x4c\x82\x38\x30\x87\x72\xad\x1b\x33\xb2\x8f\xca\x9a\x48\xb2\x15\xd6\xd0\xdd\xa3\xbd\xba\x56\x9a\x4d\x16\x7b\x26\x02\x5a\xa7\xcf\x40\xe5\x27\x1a\x13\xda\x48\xbd\x4a\xe5\xe4\x4e\xa5\x54\x44\x19\x15\x9d\xf7\xe4\xf3\x7d\x42\x7b\xee\x01\xe3\xda\xf5\xf6\x51\x6e\x71\xf0\x88\x5a\x41\xc8\x73\x6c\xb3\xa9\xde\x80\x9a\x28\x71\xb5\xac\xc1\xd3\xbd\xa3\x58\x5b\x7d\xc9\x1e\x65\x78\xc9\x85\xd2\x8c\x28\x5f\x0b\x89\x97\xf0\x85\xa4\x75\x71\x50\xc3\xcf\x74\x86\x2a\xd7\x25\x22\xae\xac\x8d\xb6\x52\xfe\x75\x7f\xc3\xb7\xb9\x95\x98\x7e\x67\x85\x3f\x33\x4e\x0f\xbf\xec\x4f\xc6\x69\x45\x5d\x3d\xc7\xd5\x42\x3c\xce\xf9\xbb\x75\x54\xae\xf3\x1d\x63\xf9\x02\xf6\x35\x56\x5a\x84\x93\x10\x2f\x21\x9f\xe5\x1d\x8d\xf4\xab\x08\xa3\x58\xc3\x90\x19\xf9\x2e\xc8\x3f\xb5\x41\x5e\xba\xef\xc3\x57\x99\x34\xf0\x6c\x3f\xa9\xe7\xb5\x50\x17\x4c\x3d\x17\xcb\xe7\x44\x5d\x33\x1e\xbf\x56\x36\xcf\x4c\xf0\x2e\x8b\x3b\x11\x70\x92\xf5\x31\x50\xd0\x2e\xf7\x17\xe3\x54\xbc\x28\xa7\xb9\x68\x66\x82\xbe\x4e\x9f\x23\xce\x15\x70\x90\x38\x60\x6f\x40\xeb\xdd\x70\x1e\x88\xf9\x77\xc9\x1a\x10\x08\x95\x80\xf5\xfd\xf6\xda\x32\x78\x55\x83\x6b\xa3\xef\x6b\xcc\x29\x96\xf4\xef\xeb\x5b\xdf\xb1\x36\x85\x46\x01\x97\x1d\x3f\x80\xff\x6c\xd9\x9a\x62\xf2\xc4\x78\x57\x22\x9c\x8d\x0e\xaa\xbd\x62\x6d\xff\x90\x31\xda\x91\xdc\x46\xb8\x9a\x83\x8d\xc7\xc1\xee\xd9\x7b\xc0\x02\x31\x74\x3d\x64\xdb\x07\x6c\x93\x55\x63\xf3\x9e\xc9\xbe\x95\xf2\x96\x48\x48\x02\xf2\x93\x71\xe1\x20\x13\xb0\x8b\x09\xe9\xaf\xc2\x3e\xf0\x25\xe3\xe0\x16\xf5\xbb\xb7\x0a\x9e\xb0\xa4\x2f\x58\xb6\x95\xc1\x2a\xf4\xd9\x9b\x8d\x00\xf3\x73\xfd\xdd\x54\xe4\x59\x36\x31\x5a\x8c\xe6\xc7\x49\x02\x1a\xff\x2b\x2f\x07\xf3\xeb\x76\x5b\x7d\xfc\xc6\xb0\x60\x2d\x6f\xbc\xdc\x1e\xfc\x2e\x84\xbe\xe4\x06\xd9\x66\xff\x2c\x24\x2c\x55\xb1\xba\x9b\x4d\xdb\x14\xef\xef\x66\xd3\xda\xa8\xdf\x5a\x43\x16\xaa\x08\xb6\x32\x0e\x77\x07\xb5\x05\xab\xd1\x7e\x2a\x5a\xd5\xd3\x9a\x6a\x96\x56\x2d\xe8\x36\xb7\xd6\xfa\xa3\xa0\xb1\x3c\x1d\xb4\x82\x34\xec\xee\xcd\xe5\x3a\x5e\x6d\xcf\x8c\xd2\x34\x6a\x89\x69\x2e\x84\xbe\x28\xa4\x9a\x29\x00\x25\xfe\x2c\xaf\xc5\x9a\x7e\xb2\x3a\x68\x19\xdb\x1e\x27\x19\xf2\x79\x6f\x65\x8b\xde\x51\xf6\x3c\x24\x61\x01\x12\x38\x81\x5e\x09\xcf\x83\x86\x6f\xe5\xff\xcd\x52\x30\x3d\xe4\xee\x5d\x65\x5c\x0f\x1d\xb1\x98\x18\x93\xe9\xc4\x3d\xeb\x8f\xc6\xee\xe9\x20\x92\x2c\xc4\x72\x7d\xc9\x69\x24\x18\xd7\xea\xc1\x35\xb3\xc5\x7d\xf4\xd0\x0f\x25\x78\xcf\xe5\x71\x10\xd4\x59\x6d\x1d\x0d\x27\xff\x04\x00\x00\xff\xff\x8f\xc4\x07\x76\x3c\x14\x00\x00")

func resourcesTBytes() ([]byte, error) {
	return bindataRead(
		_resourcesT,
		"resources.t",
	)
}

func resourcesT() (*asset, error) {
	bytes, err := resourcesTBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources.t", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _varsT = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x41\x6f\xe2\x3c\x10\xbd\xf7\x57\x58\xb9\x18\x24\xbe\x72\xef\x0d\xb5\xdf\xd7\x0f\x75\xb7\x65\xcb\xb6\x7b\xa8\x7a\x30\xce\x24\xcc\x36\x19\x67\x3d\x36\xb4\x42\xfd\xef\xab\x38\x09\x18\x12\xa4\x9e\x20\x99\x79\x6f\x9e\xe7\x3d\x47\x08\x21\x12\x42\x7d\xaf\x4a\x48\xae\x44\xf2\xa2\x0d\x69\xe5\x46\x95\xb2\xaa\x04\x07\x96\x47\x72\x53\xd6\x55\x39\x9e\x08\xf9\x0f\xa1\x96\xe3\xd7\x64\x72\x11\x80\x95\x5f\x15\xa8\xe7\x8b\x59\x9a\x5a\x60\xfe\x2a\x09\x56\x11\x07\x71\xfe\xe5\xe1\x9c\x1f\x03\xe7\x69\x80\x59\x60\xe3\xad\x86\x79\x3a\xea\xfe\xde\x5a\xe3\xab\xd1\xf8\x92\x54\x09\x13\x21\xbf\xa3\xb6\x86\x4d\xe6\x2e\xef\xc1\x6d\x8d\x7d\x9b\x52\xf3\xbb\x04\xed\x2d\xba\x8f\xd0\xcf\x72\x22\x36\xca\xa2\x5a\x15\xc0\x23\xd9\x2a\x93\xe3\xc3\xcc\x0d\x81\x5b\xfa\x15\x81\xeb\x8f\x3e\x52\x4d\xe0\x1e\x63\x29\xfb\x43\xf4\x95\x6c\xd0\x3a\xaf\x8a\xf6\x91\xa7\x1c\xf8\x79\x2a\x27\xe2\x94\xb2\x63\x89\xdf\x37\xed\xa7\x42\x0b\x24\xff\x7e\x6d\x28\xc3\xdc\x5b\xe5\xd0\x50\x72\x25\x76\xa1\x26\x44\x92\x22\xd7\x67\x5c\x28\xe6\xad\xb1\xe9\xcc\xbb\x35\x90\x43\xdd\x35\x26\xce\x7a\x68\xa9\x84\x48\x98\xd7\x35\x7a\x77\x0b\xee\x5b\xcd\xbb\x08\xb6\xdf\xc1\x07\x7f\x7e\x86\x9e\xcf\x76\x2a\x23\xe5\x05\xfc\xf0\xc6\x05\x3f\x65\xa7\x66\x8b\x94\x9a\x2d\x9f\xd5\x53\x59\xb3\x41\x46\x43\xcf\xe5\x2c\x07\x72\x7b\x09\x47\xec\x29\xaa\x9c\x0c\x3b\xd4\xbc\x74\xc6\xaa\x1c\x66\xba\x13\xfc\x82\xd9\x08\xfe\x78\x55\xf0\x91\x0f\x2b\x63\xdc\xcd\x01\x16\x1c\xc8\x54\xc1\x8d\x17\x64\xaa\x93\x25\x0f\x8d\xd0\xc6\x93\xbb\x87\xed\x83\xfd\xf7\x1d\xd9\x21\xe5\xf1\xa2\x0d\x2f\xac\xc9\xb0\x80\xf8\x3c\xda\x94\x95\x77\x60\xa9\x0b\xf6\x50\xa2\x5f\x0f\x0b\x56\x69\x89\xf4\xc4\x67\x00\x47\xd5\x3e\xae\x73\x71\x18\xd7\x55\x1b\xdc\x6e\x87\x99\x98\x73\x70\x51\x5c\xb6\xee\x9d\x8b\xcb\xb9\xa5\xaa\xa3\xb8\xfc\xfc\xa8\x9a\x6d\x56\xfb\x49\x13\xf1\x9b\x0d\x8d\x24\xf9\xa2\xa8\x9f\xa2\x3b\xd5\x1f\x14\x96\x79\xb1\xdb\x41\xc1\x70\x10\x74\x26\x31\xc9\x4b\xc4\x35\xd4\x23\x5b\x32\x4a\x4f\xa3\xd9\xd8\x39\x60\x16\x96\x2a\x87\x47\xc8\xc0\x02\xe9\xa6\x12\xd6\xf4\xbf\xe2\x6b\xcf\xce\x94\xf3\xba\x61\x2f\xad\x46\xf4\xee\x7e\x74\xad\xaf\x1b\xef\xa7\x81\x96\xe5\x44\x46\x24\x72\xe0\xa8\xdd\x67\x94\xd7\x60\x7b\x16\x1a\x0e\xb8\x45\xd7\x10\xbb\x5f\x87\x2f\xcb\xce\x83\x1e\xea\xe2\x09\x80\xdf\xfc\xb9\xf6\xe5\xdd\xd3\x49\xf3\x06\x2c\x77\x6b\x1f\x00\x3c\x37\xe5\xde\xc6\xf7\x3b\x17\xcd\x27\xe3\x46\x39\x75\x83\xfc\xc6\x71\xe0\x0c\xd7\xaf\x22\x1b\xea\x5b\xa3\xf4\x1a\x29\xaf\xe7\x3d\x82\x4a\x7f\x59\x74\x10\xeb\xd1\x16\x94\x83\x87\xaa\xcb\xc2\x7f\xb6\x5d\x6b\xdc\x54\x2a\x52\x39\xa4\x3d\xf6\x43\x04\xda\x1b\x5d\xe7\x76\xe0\x68\x35\xb0\x89\xf4\x6b\xb2\x07\xef\x0f\xd6\x44\xea\xe2\x6f\x00\x00\x00\xff\xff\xe9\x27\x63\xc3\x36\x07\x00\x00")

func varsTBytes() ([]byte, error) {
	return bindataRead(
		_varsT,
		"vars.t",
	)
}

func varsT() (*asset, error) {
	bytes, err := varsTBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vars.t", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"base.t":      baseT,
	"outputs.t":   outputsT,
	"params.t":    paramsT,
	"resources.t": resourcesT,
	"vars.t":      varsT,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"base.t":      {baseT, map[string]*bintree{}},
	"outputs.t":   {outputsT, map[string]*bintree{}},
	"params.t":    {paramsT, map[string]*bintree{}},
	"resources.t": {resourcesT, map[string]*bintree{}},
	"vars.t":      {varsT, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
