// Code generated for package engine by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../parts/base.t
// ../../parts/outputs.t
// ../../parts/params.t
// ../../parts/resources.t
// ../../parts/vars.t
package engine

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _baseT = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xcf\x4a\x04\x31\x0c\xc6\xef\xf3\x14\xa1\x7a\x74\x3b\x53\xc1\xcb\x3c\x87\x78\x11\x0f\xb1\x06\x77\x65\xfa\x87\x24\x5d\xd0\xa1\xef\x2e\x9d\x2d\xba\xb0\x43\x6e\xf9\xe5\xf7\x7d\x59\x07\x00\x73\x2f\xfe\x48\x01\xcd\x0c\xe6\xa8\x9a\x65\x1e\xc7\xcb\xc6\x06\x8c\xf8\x49\x81\xa2\x5a\xfc\x29\x4c\xd6\xa7\xd0\x99\x8c\x8f\x93\x7b\x3a\x4c\xee\x30\xb9\xf1\x83\xf2\x92\xbe\xdb\xdd\x33\x85\xbc\xa0\x92\xfd\x92\x14\xef\xcc\x43\xcb\xf7\x29\x2a\x45\x7d\x21\x96\x53\x8a\xad\xc6\xd9\xa9\xcd\x05\x67\x64\x0c\xa4\xc4\x62\x66\x68\x0f\x01\xac\xab\xf6\x9c\x8e\xc5\xaa\x01\x5b\xeb\x00\x50\x37\xe9\x8c\x7c\xc2\xf7\x85\xf6\x9d\x33\xf2\x8d\xc1\x24\xa9\xb0\xdf\x8c\xd7\x1b\xe3\x8f\xfe\x6b\x6f\x9b\x96\x8a\xe6\xa2\xfb\x35\x9d\x5d\x35\x0d\x75\xf8\x0d\x00\x00\xff\xff\x73\x84\xae\x0d\x53\x01\x00\x00")

func baseTBytes() ([]byte, error) {
	return bindataRead(
		_baseT,
		"base.t",
	)
}

func baseT() (*asset, error) {
	bytes, err := baseTBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base.t", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _outputsT = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x50\x50\x4a\x4c\xc9\xcd\xcc\x0b\x2d\x4e\x2d\xca\x4b\xcc\x4d\x55\xb2\x52\xa8\xe6\x52\x50\x50\x50\x50\x2a\xa9\x2c\x00\xf1\x94\x8a\x4b\x8a\x32\xf3\xd2\x95\x74\x20\xa2\x65\x89\x39\xa5\x60\xe1\xe8\x82\xc4\xa2\xc4\xdc\xd4\x92\xd4\xa2\x62\x0d\x75\x14\x23\xd4\x35\x63\x95\xb8\x14\x14\x6a\xb9\x00\x01\x00\x00\xff\xff\xe6\xc7\xec\x89\x5c\x00\x00\x00")

func outputsTBytes() ([]byte, error) {
	return bindataRead(
		_outputsT,
		"outputs.t",
	)
}

func outputsT() (*asset, error) {
	bytes, err := outputsTBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "outputs.t", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _paramsT = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x98\xcd\x6e\xe3\x38\x0c\xc7\xef\xfb\x14\x84\x2f\xd3\x02\xd9\x1e\x06\x8b\x3d\xf4\xd6\x45\x06\xdd\xa2\x49\x53\xc4\x8d\x2f\x45\xb1\x50\x6c\x26\x16\x6a\x4b\x86\x48\x25\xed\x04\x79\xf7\x85\xec\x38\x5f\x93\x0f\xdb\xe9\xfa\xb0\x3d\x15\xb2\x48\xfe\xf8\x17\x23\xd2\x06\x00\xf0\x12\x1d\x0a\x96\x5a\x79\xb7\xb0\xf8\x0d\xf2\x3f\x8f\x3f\x33\xf4\x6e\xc1\x23\x36\x52\x4d\xbd\x4e\xb9\x1e\xe1\x44\xd8\x84\x03\x91\xd8\xfc\xf9\xab\x41\xd2\xd6\x84\x78\x6f\xb4\xcd\xae\xae\x6f\x4a\x67\x6f\x6b\x9b\xc5\xe2\x1e\xf9\x2e\x49\xf4\x1c\xa3\xde\xea\x29\x2d\x97\xa5\xc7\x14\x59\x44\x82\xc5\x56\xf4\x3c\x0e\x85\x46\x66\x2b\x2c\xaf\xb4\x83\x89\x36\x20\x92\x04\xca\xb0\x74\xe3\xad\x8c\x0a\x87\xcb\x22\xaa\x37\x4b\x9f\x44\x8a\x55\x32\xaa\x14\xdf\x39\x03\x3d\x01\x8e\x11\x82\xfe\xd1\x98\xbe\xfc\x59\x25\xe6\xb6\x22\x41\xdf\x19\xd5\xd5\xc3\xd9\x9c\xe5\x11\x96\x63\x54\x2c\x0b\xe9\x5e\x0a\x96\xda\x27\x9c\x09\xa2\xb9\x36\xd1\x66\x87\x58\x91\xbb\x1d\xe4\xdd\xc2\xeb\x06\xf3\x97\xcd\x00\x1e\x51\xfc\x6c\xc7\x89\x0c\x1f\xf1\xb3\x04\x7d\xab\x27\xbf\x63\x77\xe9\xee\x66\x04\xac\xc1\x12\x82\x56\xd0\x93\xca\x7e\xc0\x4c\x1a\xb6\x22\x81\x54\x84\xb1\x54\x78\x4c\x96\x28\x95\x6a\x44\x68\x54\xc5\x0a\xd9\x57\x44\xfc\xb4\x06\x2d\xa1\xa9\x59\x44\x65\xcc\xbc\x88\xf3\x93\x5b\xf1\xf6\xcf\xf3\x3e\x97\xc2\x1e\xe2\xc5\xd0\x1a\x3c\x47\x5d\x13\xb6\x0c\x58\x13\x56\xd3\x43\x2a\xa6\x98\x1f\x38\xc5\x68\x9a\xe8\x5b\x93\x74\xe0\x83\x74\x31\x21\x2b\x83\x9e\x66\x1b\x4c\x26\xed\x72\x69\x17\xf0\x34\x93\xff\x38\x6a\x93\xc8\x7f\x1c\x9d\xe6\x09\xd0\x50\xc3\x8e\x90\x08\x46\xe2\xa6\x64\xb3\x22\xf0\x69\xba\xd1\xb0\xd7\xa6\x5a\xa3\x61\xef\x28\x4f\x57\xd2\x7b\x6b\x38\xc1\xdf\xdd\xb3\x30\x41\x3a\xa5\xf6\x80\xfa\xf7\xfe\x59\x22\x9f\xb5\x11\x53\xbc\x0b\x43\x6d\x15\x3f\x74\x5b\x40\x7b\xe8\x96\xcd\x71\xe0\x43\x24\xe9\x1d\xa8\x80\x00\x51\x50\x9c\x04\xae\xd8\x29\xf3\x2e\x3e\x58\x5b\xd4\x6d\xe1\x65\x4f\x4b\x85\x12\x53\x8c\x0a\x4c\xd6\x10\x1a\x14\x7c\xec\x7a\x9d\x29\xe4\x27\x9c\x0f\xcc\x8f\x0f\x49\xec\x68\x1a\x88\xa9\x70\x5e\xa9\x99\x6f\xef\x03\xf0\xb0\x0c\xd9\xac\x87\x77\x91\xd1\xa4\x52\x21\xc1\x3c\x46\x8e\xd1\x80\x36\xa0\x34\x83\x00\x85\xf3\x75\xf3\x56\xc8\x73\x6d\xde\x81\x62\x6d\x93\x08\xc6\x08\x99\xd1\x33\xe9\x6e\x05\x8c\x4e\xa8\xd2\xb0\x99\xbf\x86\x5a\x85\x82\xaf\xf6\xe7\x58\xd7\xa8\x3b\xf0\xed\x77\xe7\xfb\xdb\xf5\xdb\x05\xf3\xe2\x7e\x62\x57\x22\xc9\x62\xa1\x6c\x8a\x46\x86\x1d\x88\x3f\xb3\x18\x55\x07\xac\x8a\xd0\x50\xa8\x0d\x76\x20\x43\x23\x75\x74\xbd\x29\x82\x4d\x74\xa9\x7a\xa8\xa6\x1c\x7b\xb7\xf0\x7d\xb3\x2a\x3e\xd6\xab\x7f\xfe\xf1\x8b\x36\xc3\xed\xdc\x1a\x0b\x75\x48\xa1\x4b\x74\x29\xfd\xc1\xd4\x39\x5c\xcf\x19\x65\x99\xed\xeb\x76\xe2\x17\x71\x17\x45\x06\x89\x9a\x64\xb5\x58\xdc\x04\x0a\xf9\xd9\xe8\x89\x4c\x30\xff\x7f\xe5\x6d\xb9\xac\x99\x5b\xf0\xf4\xe3\x05\x44\x61\x0c\x94\x89\x10\x0f\x13\x93\x1d\xff\x87\xf5\x5a\x78\xbf\xac\x62\x0b\x1f\x47\x04\x2f\x1e\x7e\x9d\xe4\xfe\xb6\xbf\xda\xa2\xfb\xc8\xb4\xc5\x7c\xf6\x9d\xa8\x98\x95\xff\xd2\x9a\x9b\xa0\xb3\xb1\x58\xe9\xea\xdc\xd9\xe8\x16\x26\x22\x21\x6c\x78\x73\xfa\x39\x33\x38\x68\x20\xe4\xfc\xc7\x71\xf6\x5d\xf4\xe5\xb9\xdf\x66\x86\x17\x25\xe8\x60\x2b\x67\x36\xd6\x9a\xbb\x52\x4c\x95\x26\x96\x61\xa3\x0a\x2c\x58\xdb\xce\x32\x3f\xbf\x68\x43\x5e\x39\xe3\x2d\x9b\xdd\x59\xea\x7f\x3a\x09\xec\xcd\x6a\x87\x27\x81\xda\x5a\x35\xbc\x6f\x95\x56\x78\xc1\x55\xba\x73\xde\x95\x66\xd0\xa3\x19\x34\xfd\x80\xe3\xb3\x50\x91\x30\xd1\x3f\xbd\xa1\x5f\xe9\xb4\x0f\x1a\x6c\xaf\xdf\x0f\xfd\x0b\x3f\xe4\x7c\xa1\x2c\x8f\x52\x1d\xfe\x2a\x72\x56\x96\xdc\x4b\x45\x45\x76\xf7\x6e\x96\x82\xef\x0d\x95\x70\xd8\x35\x95\xf8\x37\x00\x00\xff\xff\x09\xd5\xd0\xd8\xad\x15\x00\x00")

func paramsTBytes() ([]byte, error) {
	return bindataRead(
		_paramsT,
		"params.t",
	)
}

func paramsT() (*asset, error) {
	bytes, err := paramsTBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "params.t", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesT = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x6d\x6f\xdb\x36\x10\xfe\x9e\x5f\x41\x68\x03\xe4\x00\xf2\x4b\x02\x6c\x6b\xf3\xad\xad\x8b\xcc\x58\x9c\x04\x51\x9a\x7d\x08\x82\x81\x26\xcf\x0a\x1b\x89\x54\x49\xca\xa9\x6b\xf8\xbf\x0f\x7a\x7f\xa3\x64\x79\xcd\xda\x0f\x49\xcc\xbb\xe3\xf1\x79\xee\x8e\x0f\x8d\x10\x42\xbb\x13\x94\xfc\xb3\x70\xc8\x1e\x40\x2a\x26\xb8\x75\x81\xac\xf3\xd9\xd9\xbb\xf1\xec\xb7\xf1\xec\xcc\x72\x72\x0b\x8e\x03\x88\xd7\x1e\x89\xe0\x04\xeb\x91\x7d\x07\x4a\x44\x92\xc0\xa5\x14\x51\x38\x87\xd0\x17\xdb\x00\xb8\x1e\xdb\x0e\x8a\x38\xfb\x16\x81\xab\x25\xe3\xde\x88\x16\x4b\xa3\xd3\x49\x1c\xe5\xf4\xf4\xa9\x0c\xab\xb7\x61\x12\x76\xc9\x88\x14\x4a\xac\xf5\x24\x8f\xab\xa6\xa5\xa7\x2a\x1d\x42\x29\x42\x90\x9a\x81\xb2\x2e\x8a\xfc\x11\xb2\x02\x41\x93\x40\x0b\x4e\x24\xc4\x3e\xd8\x2f\x9c\xe2\x7d\x20\x08\x7d\xac\xa1\xe6\x84\x90\xf5\xab\x22\xcf\x10\xe0\xd8\xf3\x59\xeb\x50\x5d\x4c\xa7\xe9\x27\x93\x00\x73\xec\x25\x91\x26\xf8\x47\x24\x61\x42\x44\x90\xad\xa9\xe9\xf9\xec\x2c\x86\x67\x3c\x3b\xab\x64\x79\x9f\xed\x31\xf9\xaa\x04\xff\xa5\xb2\x3b\x42\x16\x11\x5c\x03\xd7\x15\x90\xcf\x26\xb3\xf8\x7f\xdd\x4c\xe6\x87\xb7\x2e\xd0\xe3\x53\xb1\xb2\x3f\xa9\xfe\xdc\xa7\x2e\xbb\x6e\x0c\xaf\x41\xbf\x0a\xf9\x32\x0d\xa3\x95\xcf\xc8\xe2\xf6\x03\xa5\x12\x94\x82\x0a\x8e\x2d\xc6\xdf\x8f\x67\xe7\x66\xc6\x37\x58\x32\xbc\xf2\x41\x8d\xec\x46\xc0\x6b\x1c\x80\x5d\xa5\xd3\x17\x04\xeb\x2c\xe6\x63\x88\x25\x0e\x40\x83\x54\x23\x3b\x5f\xa8\x59\x37\xb8\xdc\xed\xd8\x1a\xfd\x89\xd5\xfc\xda\x8d\x03\xa3\xc9\x7e\x5f\x12\x48\xb9\x72\x41\x6b\xc6\x3d\xd5\xe4\x90\x8a\x00\x33\x1e\xbb\x5c\xe1\x15\xf8\xad\xbd\x37\x41\x9e\x67\x09\xa8\x73\xb2\xdb\x01\xa7\xd5\x1d\x8a\xb3\xf9\x79\xb2\x4b\xd0\xcf\x82\xc6\xf1\xe6\x5b\x8e\x03\x46\xac\xff\xc8\x03\x4f\x7f\xba\x40\x22\xc9\xf4\x36\x69\x99\x9f\xe6\x82\x2b\xef\x6d\xf1\x2f\x90\x50\x59\x9e\x77\x91\x9f\x56\x62\x05\xed\xdd\xee\x12\xb4\x5b\x35\x40\x93\x87\xe5\xad\x14\x6b\xe6\xc3\xe4\x56\x48\xad\x2a\xa0\x3e\xf5\x02\x46\x04\xa7\xac\x48\x17\xbe\x45\xd8\x57\xa3\x1a\x73\x1c\xf4\x35\xbc\xde\xc8\xcf\xdf\x99\x8a\xb9\xb7\x4f\x1d\x64\x73\x78\xb5\xfb\x67\x48\x8e\xfb\x86\x49\x1d\x61\x3f\xfb\xf3\x00\xe2\xef\xcd\x88\xb7\xf2\xf9\x7f\x30\xc7\x69\x47\xb9\x21\x26\xad\x21\x95\xad\xdd\x4a\x58\xb3\xef\x2d\x46\x90\x21\xc9\xac\x3f\x6b\x35\x5f\xb2\x51\x30\x91\xb2\x1d\xad\x38\xe8\x16\xcf\xf5\x1d\x8c\x70\xa4\x9e\x4d\x40\xfa\x0f\x6a\x3a\x52\x47\x60\xf3\x21\xca\x69\x58\xff\xbd\xbf\xd4\x0e\xf6\xe6\x82\x6b\x90\x6b\x4c\x0e\xcd\xc8\x3f\x0e\xf7\x25\x23\x3f\x59\x23\x14\x42\xe0\x54\xdd\xf0\x1a\x27\xc7\x0c\x62\x53\x4d\x98\x6c\xcc\xe3\x24\x33\x78\x3a\x58\xb4\x2c\xfc\x24\xf8\x9a\x79\x91\x4c\x0e\x31\xb0\x86\x72\xaf\xeb\xf8\xca\x3e\xaa\x6a\x42\xc9\x36\x58\x43\xff\x8c\x76\x9a\x5e\x69\x35\x19\xe2\xc5\x27\xa0\x4d\xfa\x62\xa8\xdc\xc4\x63\x41\x5b\xa5\x57\xeb\x9c\x3c\xa9\x94\x8a\x30\xa3\xa2\x77\x9f\xfc\x7e\x5f\xd0\x91\x3d\xe0\xba\xb6\x9d\x43\x94\x1b\x12\x3c\xa2\x57\x10\x72\x2c\xd3\xdd\xd4\x1c\x40\x6d\x94\xb8\xf2\x1a\xf0\xf4\x6b\x14\xe3\xa8\xaf\xc4\xa3\x0c\x7b\x5c\x28\xcd\x88\x72\xb5\x90\xd8\x83\x0f\x24\xed\x8b\x41\x03\x3f\xf3\x99\xaa\xdc\x97\x88\xa8\x26\x1b\x4d\xad\xfc\xfb\xe1\x81\x6f\x4a\x2b\x09\xfd\x93\x1d\xfe\xc2\x38\x1d\xbe\xd9\x5f\x8c\xd3\x9a\xbb\x7a\x89\xea\x8d\x78\x5c\xf2\xf7\xdb\xb0\xda\xe7\x05\x63\xb9\x00\xfb\x14\x29\x2d\x82\x1b\xb5\x08\xb0\x07\xf9\x6d\xde\x33\x4a\x3f\x89\x20\x8c\x34\x4c\x59\x6c\xdf\x07\xfa\xbb\x2e\xd0\xd3\x1d\x93\xfd\xde\x5c\xcc\xa4\x47\xcf\x14\x4a\xb3\xb2\x85\x9a\x33\xf5\x52\xca\xcf\x85\xba\x62\x3c\xfa\x5e\xd3\x9e\x99\xe1\x7d\x76\xee\xc4\xc0\x4a\x04\xa4\xaf\xa0\xdb\xee\x6f\xc6\xa9\x78\x55\x56\x5b\x6a\x66\x86\xae\x4e\x1f\x24\xd6\x25\x70\x90\xd8\x67\x3f\x80\x36\xe7\xe1\xca\x17\xab\x2f\x92\xb5\x20\x10\x29\x39\x5f\xee\xae\x0c\x57\xaf\x6a\xb1\x1d\xfb\xbb\x1a\x73\x8a\x25\xfd\xe7\xea\xce\xb5\x8c\x63\xa1\xd5\xc2\x79\xe2\x79\x61\x7c\xd0\x1a\x93\x67\xa0\x37\x09\x6a\xd9\x89\x06\x14\x06\x65\xaa\x57\x7d\x1d\xa8\x8b\x84\xa2\x63\xcb\xc2\x9c\xf3\xc3\xf2\xd2\x2d\x98\xb0\x34\x6e\xbc\x26\xac\x87\xc0\x53\x1f\x3b\x31\x4f\x22\x04\x9e\xca\x60\x4f\xdd\x5a\x6f\x89\xee\xf6\x34\x51\xb0\xef\x7d\x0e\x99\xea\x71\x48\x2d\x0e\xaa\xc3\x42\xe8\x27\xa6\xe8\x02\x59\x35\x75\x1f\x7f\xba\xdf\x57\xf5\x02\x91\x90\x20\x3c\xc7\x1a\x37\x3b\x29\x59\x83\x9b\x30\xa7\x66\x11\x84\x42\xea\xfa\xf3\xb6\x5e\x98\x8b\xf6\x08\x4c\x21\xae\x4f\xab\xc5\xbc\x59\xe2\x56\x7a\x89\x76\x73\x54\xe3\xa7\xaf\xb0\x07\xd6\x6f\xf6\x8e\x58\x62\xf2\xcc\x78\xdf\x84\x3b\x9f\x0d\xba\x56\xca\x17\xe9\x9b\x28\xc4\xde\xb9\x1d\x9b\xd7\xc7\xeb\xa0\xae\xae\xf8\x65\xed\xd7\xaa\x9e\xe2\xab\xa0\x01\xa2\x7a\x6a\x3b\xc8\xa4\x91\x4d\x6a\x33\xed\xca\xec\xaf\x5d\xbb\xfa\xdc\x84\xfd\xa4\x5e\x1f\x6d\x4c\xc8\x78\x13\x8c\x81\x7b\x8c\x83\xfd\x74\xb0\xab\x8a\x68\xcf\x58\xd2\x57\x2c\xbb\x2e\x86\x4d\xe0\xb2\x1f\x26\xe6\xe2\x8f\x9b\xdf\x25\xb4\x1a\xaa\x23\x68\x04\x6b\xd6\xf1\x2d\x46\xee\x0c\x1f\x85\xd0\x9f\x79\x8c\x53\xbb\x3d\x4a\x0b\xc3\xd4\xdf\xdc\xdf\x2e\xbb\x1c\x1f\xee\x6f\x97\x0d\x31\xbb\x37\x1e\x40\xa8\x32\xf5\x9a\xe0\x2b\x16\x1a\x4f\x88\xd6\xf5\x5a\xf3\xaa\xaf\x36\x5c\xb3\x22\xe9\xc0\xaa\xfd\x2e\x6b\x3e\x7b\x5b\xcf\x83\x41\x22\xbb\x15\xf7\x60\x65\x36\xf1\xea\x7a\x48\x57\xf4\x56\xc7\x99\x56\x42\xe8\x79\x69\xd5\x2e\x01\xa8\xf0\x67\xf8\x3e\xa4\xe1\x9f\x88\x63\x2d\x23\xd3\xf3\x3b\x43\x3e\x9f\x91\x6c\x3d\x3a\x2a\x9e\x83\x24\xac\x41\x02\x27\x30\xaa\xe0\x39\x48\x5e\xd6\xbe\x19\x4e\xc1\x74\x90\x7d\x50\xac\xdb\x0e\x3a\x42\x7a\xc7\x21\x53\xe5\x70\x3e\x9e\x9d\xd9\xa7\x93\x50\xb2\x00\xcb\xed\x67\x4e\x43\xc1\xb8\x56\x8f\x76\xac\x9d\xec\x27\x07\x7d\x55\x82\x8f\x6c\x1e\xf9\x7e\x93\xd5\x4e\xe9\x73\xf2\x6f\x00\x00\x00\xff\xff\xcc\x18\xea\x6b\x1e\x17\x00\x00")

func resourcesTBytes() ([]byte, error) {
	return bindataRead(
		_resourcesT,
		"resources.t",
	)
}

func resourcesT() (*asset, error) {
	bytes, err := resourcesTBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources.t", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _varsT = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4f\x6f\xe2\x3e\x10\xbd\xf7\x53\x58\xb9\x04\x24\x7e\xe5\xde\x1b\x6a\x7f\xdb\xa2\xee\x16\xb6\x6c\xbb\x87\xaa\x07\xe3\x4c\x82\xb7\xc9\x38\xeb\xb1\xa1\x15\xe2\xbb\xaf\xec\x10\x70\xfe\x49\x9c\x5a\xe2\x79\x6f\x9e\xe7\xbd\x31\x63\x8c\x45\x28\xc5\x13\x2f\x20\xba\x61\xd1\x9b\x50\x28\xb8\x19\x95\x5c\xf3\x02\x0c\x68\x1a\xc5\xdb\xc2\x9d\xc6\xe3\x09\x8b\xff\x43\x29\xe2\xf1\x7b\x34\xb9\xf2\xc0\xd2\xae\x73\x29\xe6\xcb\x59\x92\x68\x20\xba\x94\x44\x96\x01\x07\x52\x76\x71\x73\xca\x9a\xc0\x79\xe2\x61\x1a\x48\x59\x2d\x60\x9e\x8c\xea\x7f\xef\xb5\xb2\xe5\x68\x7c\x8d\xbc\x80\x09\x8b\x7f\x48\xa1\x15\xa9\xd4\x5c\x3f\x81\xd9\x29\xfd\x31\xc5\xea\xef\x0a\x84\xd5\xd2\x7c\xf9\x7a\x8a\x27\x6c\xcb\xb5\xe4\xeb\x1c\x68\x14\x1f\x95\xc5\xe3\x73\xcf\x2d\x82\x59\xd9\x35\x82\xe9\xb6\x6e\xa8\x46\x30\xcf\xa1\x94\xd3\x25\xba\x4a\xb6\x52\x1b\xcb\xf3\xe3\x4f\x9a\x92\xe7\xa7\x69\x3c\x61\x6d\xca\x9a\x25\xfc\x5e\x95\xb7\x85\xe6\x12\xed\xe7\xad\xc2\x54\x66\x56\x73\x23\x15\x46\x37\x6c\xef\xcf\x18\x8b\x12\x49\xee\x8e\x4b\x4e\xb4\x53\x3a\x99\x59\xb3\x01\x34\x52\xd4\x85\x91\xd1\x16\x8e\x54\x8c\x45\x44\x1b\x87\xde\xdf\x83\xf9\xee\x78\x97\xde\xf6\x47\xf8\xa2\xc3\xc1\xd7\x1c\x8e\x5d\x49\x62\x96\xc3\x4f\xab\x8c\xf7\x33\xae\xd5\xec\x24\x26\x6a\x47\x83\x7a\x4a\xad\xb6\x92\xa4\xc2\xd7\x62\x96\x01\x9a\x93\x84\x06\x7b\x22\x79\x86\x8a\x8c\x14\xb4\x32\x4a\xf3\x0c\x66\xa2\x16\xfc\x26\xd3\x11\xfc\xb5\x3c\xa7\x86\x0f\x6b\xa5\xcc\xdd\x19\xe6\x1d\x48\x79\x4e\x95\x17\xa8\xca\xd6\x90\xfb\x5a\x08\x65\xd1\x3c\xc1\x6e\xa1\xff\xff\x94\x64\x24\x66\xe1\xa0\x15\x2d\xb5\x4a\x65\x0e\xe1\x7d\x84\x2a\x4a\x6b\x40\x63\x1d\xec\xbe\x44\xbf\x9f\x07\xcc\x93\x42\xe2\x0b\x0d\x00\x1a\xa7\x5d\x5c\xed\x62\x3f\xae\x3e\xad\x70\xfb\xbd\x4c\xd9\x9c\xbc\x8b\xec\xfa\xe8\xde\x50\x5c\x86\x86\xca\x1b\x71\xf9\xf5\x55\x56\xd3\x2c\x4f\x9d\x26\xec\x0f\x29\x1c\xc5\x68\xf3\xdc\xfd\x0a\x76\xaa\xdb\xc8\x0f\xf3\x6a\xbf\x87\x9c\xe0\x2c\x68\x20\x31\xd1\x5b\xc0\xd5\x57\x13\x1f\xc9\x30\x69\x47\xb3\xb2\x33\x34\xcb\x0f\x03\x95\x61\x0f\x9c\x66\xc6\x70\xb1\x81\x64\x41\x77\x92\x3e\xce\x3a\x64\xc1\x33\x78\x86\x14\x34\xa0\x08\x60\x0f\x9c\x6e\x2d\x19\x55\x2c\x68\xee\x4a\x4e\x08\x87\xe9\x3c\x0d\xc1\xd6\xdf\x56\xd1\x98\x7a\x62\x8a\x27\x71\x45\xe3\x49\xe2\x9e\x49\xd4\xaf\x2c\x6d\x40\x77\x1c\x56\x55\xf3\x65\x5d\x10\x86\xc3\x65\x33\x4d\x87\x41\x0b\x77\xd8\x02\xd0\x87\x1d\x2a\x5f\x3d\xbe\xb4\x8a\xb7\xa0\xa9\x76\xa5\x07\xf0\x5a\x1d\x77\x0c\xf1\x96\x34\x3f\xf8\x97\xe5\x8e\x1b\xee\x66\x4f\x61\x2e\x95\xb7\x23\x58\x2d\xb7\x5c\x5c\x6c\x24\x66\xae\xef\x33\xf0\xe4\xb7\x96\x06\xea\x68\x0f\x3b\xe9\x80\x1a\xb8\x81\x45\x59\x67\xa9\xaa\x0c\xaf\x54\x70\xe4\x19\x24\x9d\x9e\x97\x9a\x9a\x38\xfd\x27\x4f\x1d\x8d\xbf\x7e\x4d\x72\xe8\x31\xb7\x2d\xea\x9b\x3e\x86\xe1\x42\x5d\xd4\x78\xa6\xdc\x32\xf6\x18\xe2\x80\xd5\x9e\xb6\xd5\x84\xb6\x54\xfb\x72\xf5\x2f\x00\x00\xff\xff\x47\xd4\xe6\xc6\x13\x08\x00\x00")

func varsTBytes() ([]byte, error) {
	return bindataRead(
		_varsT,
		"vars.t",
	)
}

func varsT() (*asset, error) {
	bytes, err := varsTBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vars.t", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"base.t":      baseT,
	"outputs.t":   outputsT,
	"params.t":    paramsT,
	"resources.t": resourcesT,
	"vars.t":      varsT,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"base.t":      {baseT, map[string]*bintree{}},
	"outputs.t":   {outputsT, map[string]*bintree{}},
	"params.t":    {paramsT, map[string]*bintree{}},
	"resources.t": {resourcesT, map[string]*bintree{}},
	"vars.t":      {varsT, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
