// Code generated for package engine by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../parts/base.t
// ../../parts/outputs.t
// ../../parts/params.t
// ../../parts/resources.t
// ../../parts/vars.t
package engine

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _baseT = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xcf\x4a\x04\x31\x0c\xc6\xef\xf3\x14\xa1\x7a\x74\x3b\x53\xc1\xcb\x3c\x87\x78\x11\x0f\xb1\x06\x77\x65\xfa\x87\x24\x5d\xd0\xa1\xef\x2e\x9d\x2d\xba\xb0\x43\x6e\xf9\xe5\xf7\x7d\x59\x07\x00\x73\x2f\xfe\x48\x01\xcd\x0c\xe6\xa8\x9a\x65\x1e\xc7\xcb\xc6\x06\x8c\xf8\x49\x81\xa2\x5a\xfc\x29\x4c\xd6\xa7\xd0\x99\x8c\x8f\x93\x7b\x3a\x4c\xee\x30\xb9\xf1\x83\xf2\x92\xbe\xdb\xdd\x33\x85\xbc\xa0\x92\xfd\x92\x14\xef\xcc\x43\xcb\xf7\x29\x2a\x45\x7d\x21\x96\x53\x8a\xad\xc6\xd9\xa9\xcd\x05\x67\x64\x0c\xa4\xc4\x62\x66\x68\x0f\x01\xac\xab\xf6\x9c\x8e\xc5\xaa\x01\x5b\xeb\x00\x50\x37\xe9\x8c\x7c\xc2\xf7\x85\xf6\x9d\x33\xf2\x8d\xc1\x24\xa9\xb0\xdf\x8c\xd7\x1b\xe3\x8f\xfe\x6b\x6f\x9b\x96\x8a\xe6\xa2\xfb\x35\x9d\x5d\x35\x0d\x75\xf8\x0d\x00\x00\xff\xff\x73\x84\xae\x0d\x53\x01\x00\x00")

func baseTBytes() ([]byte, error) {
	return bindataRead(
		_baseT,
		"base.t",
	)
}

func baseT() (*asset, error) {
	bytes, err := baseTBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base.t", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _outputsT = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x50\x50\x4a\x4c\xc9\xcd\xcc\x0b\x2d\x4e\x2d\xca\x4b\xcc\x4d\x55\xb2\x52\xa8\xe6\x52\x50\x50\x50\x50\x2a\xa9\x2c\x00\xf1\x94\x8a\x4b\x8a\x32\xf3\xd2\x95\x74\x20\xa2\x65\x89\x39\xa5\x60\xe1\xe8\x82\xc4\xa2\xc4\xdc\xd4\x92\xd4\xa2\x62\x0d\x75\x14\x23\xd4\x35\x63\x95\xb8\x14\x14\x6a\xb9\x00\x01\x00\x00\xff\xff\xe6\xc7\xec\x89\x5c\x00\x00\x00")

func outputsTBytes() ([]byte, error) {
	return bindataRead(
		_outputsT,
		"outputs.t",
	)
}

func outputsT() (*asset, error) {
	bytes, err := outputsTBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "outputs.t", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _paramsT = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x98\xcf\x6f\xea\x38\x10\xc7\xef\xfb\x57\x8c\x72\x79\xad\xd4\xed\xe1\x69\xb5\x87\xee\xa9\xbb\x54\x5d\x54\x28\x88\x94\x5c\xaa\x6a\x65\x92\x81\x58\x4d\xec\xc8\x1e\x43\x79\x88\xff\x7d\xe5\x98\xf0\xab\x04\x92\xd0\x65\xa5\xf7\x4e\x4f\x8e\x3d\xdf\xcf\x7c\x3d\xb5\xc7\x00\x00\x78\x89\x0c\x19\x71\x29\xbc\x3b\x58\xfc\x02\xf9\x3f\x8f\xe6\x19\x7a\x77\xe0\x69\x52\x5c\x4c\xbc\x9b\x62\x3c\xc2\x31\x33\x09\x05\x2c\x31\xf9\xf7\x57\x85\x5a\x1a\x15\xe2\xa3\x92\x26\xbb\xba\xbe\x2d\x82\xbd\xad\xd7\x2c\x16\x8f\x48\xf7\x49\x22\x67\x18\x75\x56\x5f\xf5\x72\x59\x44\x4c\x91\x58\xc4\x88\x6d\xa9\xe7\x3a\x3a\x54\x3c\x5b\x61\x79\xc5\x3a\x18\x4b\x05\x2c\x49\xa0\x90\xd5\xb7\xde\x6a\x91\x0b\xb8\x74\xaa\xde\x34\x7d\x66\x29\x56\xc9\xa8\x92\xbe\x0d\x06\x72\x0c\x14\x23\x04\xdd\x52\x4d\x9f\xff\xa8\xa2\xb9\xed\x48\xd0\xb5\x8b\xea\xfa\x61\xd7\x9c\xe4\x61\x86\x62\x14\xc4\x9d\x75\x2f\x8e\xa5\xf6\x0e\x67\x4c\xeb\x99\x54\xd1\x66\x06\x5b\x91\xdb\x19\xda\xbb\x83\xd7\x0d\xe6\xa7\xc9\x00\x9e\xd6\x71\xdf\x8c\x12\x1e\x3e\xe1\xbc\x00\x7d\xab\x67\xbf\x65\xb7\xe9\xee\x66\x04\x24\xc1\x68\x04\x29\xa0\xc3\x85\xf9\x80\x29\x57\x64\x58\x02\x29\x0b\x63\x2e\xb0\xcc\x96\x28\xe5\x62\xa8\x51\x89\x8a\x15\xb2\xef\x08\xfb\x61\x14\x1a\x8d\xaa\x66\x11\x15\x9a\x79\x11\xe7\x3b\xb7\xe2\xed\x9e\xe6\xed\x17\xc6\x1e\xe2\xc5\xd0\x28\x3c\x45\x5d\x13\xb6\x10\xac\x09\x2b\x75\xd3\x3a\xab\xc9\xd7\xf3\xc1\x46\x2e\xc5\x68\xa7\x6c\x82\x79\xdd\xe9\x18\xd5\x65\x80\xb8\xd5\x84\xac\x10\x3d\xce\xd6\x1b\x8f\x2f\xcb\x25\xad\xe0\x71\x26\xff\x69\x78\x49\x22\xff\x69\x78\x9c\x27\x40\xa5\x1b\x5e\x4c\x09\x23\xd4\xd4\x94\x6c\xea\x84\x8f\xd3\x0d\x07\x9d\x4b\xba\x35\x1c\x74\x4a\x79\x5a\x5c\xbf\x5f\x0c\x27\xf8\xbb\x75\x12\x26\x48\x27\xfa\x72\x40\xdd\x47\xff\x24\x91\x4f\x52\xb1\x09\xde\x87\xa1\x34\x82\xda\xad\x0b\xa0\xb5\x5b\xc5\x1d\xdd\xf3\x21\xe2\xfa\x1d\xb4\x83\x00\xe6\x28\x8e\x02\x57\x3c\x48\xf3\x66\xa2\xb7\x5e\x51\xb7\x93\x28\xae\xd6\x94\x09\x36\xc1\xc8\x61\x92\x84\x50\x21\xa3\xb2\xe3\x75\x2a\x90\x9e\x71\xd6\x53\x0f\x1f\x5c\x93\xa5\x69\x60\xa6\xc0\x59\xa5\x9e\x62\x7b\x1e\x80\x87\x85\x64\xb3\x56\xa2\x85\x84\x2a\xe5\x02\x35\xcc\x62\xa4\x18\x15\x48\x05\x42\x12\x30\x10\x38\x5b\xf7\x10\x02\x69\x26\xd5\x3b\xe8\x58\x9a\x24\x82\x11\x42\xa6\xe4\x94\xdb\x53\x01\xa3\x23\xae\x34\xec\x29\x5e\x43\x29\x42\x46\x57\xfb\xed\xb4\xed\x17\x6e\xe0\xdb\xaf\x36\xf6\xb7\xeb\xb7\x33\xda\xd6\xfd\xc4\xae\x58\x92\xc5\x4c\x98\x14\x15\x0f\x6f\x20\x9e\x67\x31\x8a\x1b\x30\x22\x42\xa5\x43\xa9\xf0\x06\x32\x54\x5c\x46\xd7\x9b\x22\xd8\xa8\x73\xd1\x41\x31\xa1\xd8\xbb\x83\xef\x9b\x51\xf6\xb1\x1e\xfd\xfd\xb7\x4f\xde\x0c\xb6\x73\x6b\x6c\xd4\x21\x87\xce\xf1\xa5\x88\x07\x13\x1b\x70\xdd\xee\x14\x65\xb6\xef\xdb\x91\xbf\x88\xfb\x28\x52\xa8\x75\x93\xac\x16\x8b\xdb\x40\x20\xf5\x95\x1c\xf3\x04\xf3\xff\xaf\xa2\x2d\x97\x35\x73\x0b\x9e\x1f\x5e\x80\xb9\xc5\xa0\x33\x16\xe2\x61\x62\x6d\x46\xff\x61\xbd\xba\xe8\xe7\x55\xac\x8b\x51\x62\xb8\xfb\xf8\x75\x96\xfb\xdb\xf1\x6a\x9b\xee\x23\xe9\x2d\xe6\x93\x4f\x33\xe2\xd9\xb3\x8c\xd0\x47\x6d\x0f\x94\xf6\xe1\xb6\xfe\x6b\x2f\xa3\x97\x76\x1f\xac\x26\x68\x27\x0a\xed\xd6\x61\xb6\x30\x31\x9a\x50\x35\xad\x8c\x9a\x58\x7f\x39\xb5\x92\x4d\xb6\x2f\x1b\x4e\xf3\xa6\x6f\x8a\x2e\xa6\x52\xcd\x1f\x44\xa8\xe6\x4e\xb0\xca\x7d\x33\x14\xe8\x16\xe0\xce\x33\xf6\x53\xac\x66\xf7\x4f\xd0\x85\x22\x2b\xf7\x80\xc9\xdb\x29\x26\x22\xd7\xc5\xa4\x46\x93\xbd\x6c\xd6\x08\xc0\xc7\x40\xca\xe0\x1f\x60\x04\x16\x63\xd2\xde\x5b\x33\xae\xcb\xee\x67\xf7\x22\xfc\x53\x4a\x7a\x10\x6c\x94\x60\xa3\xfa\xb2\xaa\x95\x0c\xdb\x99\x68\x07\xc6\x2c\xd1\xd8\xd0\x1f\x3f\x47\x07\xcb\x0e\x1a\x29\x3f\x82\x4f\xfe\xf0\xf2\xd2\xef\xfe\x0f\x89\x9e\x95\xa7\x65\xae\x9c\xe0\x48\x4a\x6a\x71\x36\x11\x52\x13\x0f\x1b\x1d\x77\x8e\xf5\xd2\x59\xe6\xdb\x18\x6d\xc8\x2b\x67\xbc\xb5\x66\xb7\x71\xff\x49\xdb\xce\xbd\x87\xc1\xe1\xb6\xb3\xb6\x57\x0d\x8f\x70\x21\x05\x9e\x71\x6f\xef\xec\x77\xa5\x07\x4f\x69\x06\x4d\x0f\x7e\x9f\x98\x88\x98\x8a\xfe\xe9\x0c\xfc\x4a\xbb\x7d\x70\xc1\xf6\xf8\xe3\xc0\x3f\xf3\xc7\xcb\x2f\xb4\xe5\x89\x8b\x46\x27\xdd\x2a\x4a\x45\x47\x76\xe7\x6e\x86\x82\xef\x0d\x9d\xb0\xd8\x35\x9d\xf8\x37\x00\x00\xff\xff\x8f\x02\x28\xf9\xa1\x18\x00\x00")

func paramsTBytes() ([]byte, error) {
	return bindataRead(
		_paramsT,
		"params.t",
	)
}

func paramsT() (*asset, error) {
	bytes, err := paramsTBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "params.t", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesT = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x59\x5b\x6f\xdb\x36\x14\x7e\xcf\xaf\x20\xb4\x01\x72\x00\x5b\x76\x32\x6c\x6b\xf3\xd6\xc6\x6d\x66\xac\xb9\x20\x4a\xf3\x12\x04\x03\x4d\x1e\xdb\x6c\x24\x52\x25\x29\xa7\xae\xe1\xff\x3e\x50\x17\x5b\x17\xea\xe2\xb5\x6b\x1f\xd2\x88\x3c\x87\xe4\xf7\x7d\xe7\x1c\x1e\x16\x21\x84\xb6\x27\x28\xf9\xe3\xe0\x88\x3d\x82\x54\x4c\x70\xe7\x02\x39\xe7\x93\xb3\x37\xa3\xc9\xef\xa3\xc9\x99\x33\xcc\x67\x70\x1c\x82\x19\x7b\x22\x82\x13\xac\x07\xee\x3d\x28\x11\x4b\x02\x57\x52\xc4\xd1\x14\xa2\x40\x6c\x42\xe0\x7a\xe4\x0e\x51\xcc\xd9\xd7\x18\x7c\x2d\x19\x5f\x0e\xe8\x7e\x68\x70\xea\x19\x2f\xa7\xa7\xcf\x07\xb7\x7a\x13\x25\x6e\xaf\x19\x91\x42\x89\x85\xf6\x72\xbf\x6a\x7c\xb0\x54\x07\x83\x48\x8a\x08\xa4\x66\xa0\x9c\x8b\xfd\xfe\x11\x72\x42\x41\x13\x47\x33\x4e\x24\x18\x1b\x1c\xec\x8d\xcc\x3a\x10\x46\x01\xd6\x50\x32\x42\xc8\xf9\x55\x91\x15\x84\xd8\x58\xae\xb4\x8e\xd4\xc5\x78\x9c\x7e\xf1\x42\xcc\xf1\x32\xf1\xe4\xe1\xef\xb1\x04\x8f\x88\x30\x1b\x53\xe3\xf3\xc9\x99\x81\x67\x34\x39\x2b\xec\xf2\x21\x5b\xc3\xfb\xa2\x04\xff\xa5\xb0\x3a\x42\x0e\x11\x5c\x03\xd7\x05\x90\xcf\xbc\x89\xf9\x5b\x9e\x26\xf3\xc3\x3b\x17\xe8\xe9\x79\x3f\xb2\x3b\x29\xfe\xdc\xa5\x26\xdb\x66\x0c\x6f\x40\xbf\x0a\xf9\x32\x8e\xe2\x79\xc0\xc8\xec\xee\x1d\xa5\x12\x94\x82\x02\x8e\x35\xc6\xdf\x8e\x26\xe7\x76\xc6\xd7\x58\x32\x3c\x0f\x40\x0d\xdc\x8a\xc3\x1b\x1c\x82\x5b\xa4\x33\x10\x04\xeb\xcc\xe7\x53\x84\x25\x0e\x41\x83\x54\x03\x37\x1f\x28\xcd\xae\x70\xb9\xdd\xb2\x05\xfa\x0b\xab\xe9\x8d\x6f\x1c\x23\x6f\xb7\x3b\x10\x48\xb9\xf2\x41\x6b\xc6\x97\xaa\xca\x21\x15\x21\x66\xdc\x98\x7c\xc2\x73\x08\x6a\x6b\xaf\xc3\x7c\x9f\x07\x40\x87\x27\xdb\x2d\x70\x5a\x5c\x61\x7f\xb6\x20\xdf\xec\x35\xe8\x95\xa0\xc6\xdf\x74\xc3\x71\xc8\x88\xf3\x1f\x79\xe0\xe9\x4f\x1f\x48\x2c\x99\xde\x24\x21\xf3\xc3\x5c\x70\xb5\xfc\xb9\xf8\xef\x91\x50\xd9\x3e\xef\xe3\x20\x55\x62\x01\xed\xed\xf6\x0a\xb4\x5f\x9c\x80\xbc\xc7\xeb\x3b\x29\x16\x2c\x00\xef\x4e\x48\xad\x0a\xa0\x3e\xb7\x02\x46\x04\xa7\x6c\xbf\x5d\xf8\x1a\xe3\x40\x0d\x4a\xcc\x71\xd0\x37\xf0\x7a\x2b\x3f\x7c\x63\xca\x70\xef\x9e\x0e\x91\xcb\xe1\xd5\x6d\xcf\x21\x39\xee\x6b\x26\x75\x8c\x83\xec\xd7\x0e\xc4\xdf\xda\x11\xaf\xed\xe7\xff\xc1\x1c\xa7\x11\xe5\x47\x98\xd4\x92\x54\x36\x76\x27\x61\xc1\xbe\xd5\x18\x41\x96\x4d\x66\xf1\x59\xd2\xfc\x81\x8d\x3d\x13\x29\xdb\xf1\x9c\x83\xae\xf1\x5c\x5e\xc1\x0a\x47\x6a\x59\x05\xa4\xfd\xa0\xb6\x23\x35\x38\xb6\x1f\xe2\x90\x0d\xcb\xff\x6e\x97\x5a\x67\x6c\xce\xb8\x06\xb9\xc0\xa4\x2b\x47\xfe\xd9\x1d\x97\x8c\xfc\xa0\x46\x28\x44\xc0\xa9\xba\xe5\x25\x4e\x8e\x49\xc4\x36\x4d\xd8\xe6\xd8\xd3\x49\x36\xe1\xb9\x53\xb4\x2c\xba\x14\x7c\xc1\x96\xb1\x4c\x0e\xd1\x53\x43\xb9\xd5\x8d\x29\xd9\x47\xa9\x26\x92\x6c\x8d\x35\xb4\xe7\xe8\x61\xd5\x2a\x55\x93\xc5\x9f\x39\x01\xad\xd2\x67\xa0\xf2\x13\x8b\x19\xad\x49\xaf\x14\x39\xf9\xa6\x52\x2a\xa2\x8c\x8a\xd6\x75\xf2\xfa\x3e\xa3\x03\xb7\x47\xb9\x76\x87\x5d\x94\x5b\x36\x78\x44\xac\x20\x34\x74\x6c\xb5\xa9\x9a\x80\xea\x28\x71\xb5\xac\xc0\xd3\x7e\x47\xb1\xa6\xfa\x82\x3f\xca\xf0\x92\x0b\xa5\x19\x51\xbe\x16\x12\x2f\xe1\x1d\x49\xe3\xa2\x57\xc2\xcf\x6c\xc6\x2a\xb7\x25\x22\x2e\x5d\x1b\x6d\xa1\xfc\x47\x77\xc2\xb7\x6d\x2b\x71\xfd\x83\x11\xfe\xc2\x38\xed\xbf\xd8\xdf\x8c\xd3\x92\xb9\x7a\x89\xcb\x81\x78\xdc\xe6\x1f\x36\x51\x31\xce\xf7\x8c\xe5\x17\xb0\xcb\x58\x69\x11\xde\xaa\x59\x88\x97\x90\x57\xf3\x96\x54\x7a\x29\xc2\x28\xd6\x30\x66\x66\x7e\x1b\xe8\x6f\x9a\x40\x4f\x57\x4c\xd6\xfb\xe9\x97\x99\xf4\xe8\xd9\x0d\xa5\xaa\x6c\xa1\xa6\x4c\xbd\xd4\x62\xd6\x11\xea\x21\x3b\x66\x69\xe5\xf4\xb3\xa5\xda\x09\xe5\xeb\xb4\xbd\x70\xae\x80\x83\xc4\x01\xfb\x0e\xb4\x3a\x6b\x1e\x88\xf9\x67\xc9\x2c\x6e\x93\xa3\x7f\xbe\xff\x64\x71\xad\x6a\xdc\x19\x7b\x5f\x63\x4e\xb1\xa4\xff\x7c\xba\xf7\x1d\x6b\x90\xd7\x02\x32\xbf\xf1\xe6\x34\xbf\xd3\x1a\x93\x15\xd0\xdb\x04\x83\x8c\xe7\x1e\x34\x53\xa6\xda\xee\x52\xe7\x13\x73\x97\xfa\x6d\xd2\xc4\x72\x02\xf8\xb1\x24\xdb\xf7\xfc\x78\x7d\xe5\xef\x6f\x9b\x8e\xc6\x95\xde\xc0\x79\x0c\x97\xea\x7d\x23\xe6\x89\x87\x70\xa9\x32\xd8\x53\xb3\x5a\x67\xd0\x1c\x6c\x36\x0a\x76\x9d\x7a\x3c\x42\x59\xce\x6a\x13\x81\x7c\x4c\x05\x95\x83\xf4\x78\x5e\x9c\x91\x5f\xd5\x13\x9f\xe8\x02\x39\xa5\xfb\xb9\xf9\xba\xdb\x15\xe7\x13\x09\x89\xa7\x29\xd6\xb8\x1a\x0b\xc9\x18\xdc\x46\xf9\x4a\xb3\x30\x12\x52\x97\x1b\xd4\xb2\x18\x67\xf5\x24\x96\xc2\x5a\xce\x37\xb3\x69\x55\xd6\x4e\x5a\x06\x9b\x79\x29\x71\xd2\x47\xcc\x0f\x2c\x32\xf7\x09\x1f\x94\x51\x62\x7f\x31\xe3\x35\x66\x01\x9e\xb3\x80\xe9\x8d\x0f\x6d\x25\xc3\xe8\xba\xa1\x64\x14\x0a\x59\xc5\x5f\x7b\x9d\x90\xc5\x37\x94\xc1\xa9\x97\x0f\xf6\x48\x6b\x51\x80\xf5\x42\xc8\xf0\x73\x44\xb1\x86\x69\xd2\x02\x5f\x1a\xb0\x93\xb7\x85\x22\xe5\xf9\xcc\x8f\x38\x0e\x74\xdb\x44\x66\xae\xc0\x1c\x07\x36\x6d\x44\x8c\x73\xa0\x1f\xf1\x5c\x32\x72\x19\xc4\x4a\x83\xac\x31\x47\xd2\xef\xf5\x66\xbb\x16\x1b\xf5\x48\xcd\xe8\xf3\x32\xfe\x2c\xc2\xd2\x25\x82\x4b\x97\x8f\x5d\x77\x61\xc4\x01\x5b\x72\xa0\x96\x92\x77\x88\xf5\x1e\x6a\xc9\x1a\xca\x6b\x4c\x56\x8c\xb7\x95\xba\xf3\xc9\xe8\xac\xa1\x85\xb7\x3f\x4d\xfc\x94\x56\xa1\xb5\x80\x9b\xe9\xe5\x3a\xdb\xab\x20\x14\xec\xb2\xcc\xdd\x2b\xf4\x50\xb5\xbf\x68\x0c\x8c\xda\x43\xcc\xfe\x89\xb1\x47\xb3\x36\x76\x87\xc8\xd6\x7b\xd9\xba\x98\x54\x75\xd9\x6f\x05\x8d\xdc\x65\x01\xe2\x15\xd3\xa6\xd3\x3f\x97\xfa\x49\x0c\x27\xd9\xf7\xc9\xc5\x84\x8c\xd6\xe1\x08\xf8\x92\x71\x70\x2d\x12\x6d\x0a\xe8\x15\x96\xf4\x15\xcb\xa6\x8b\xca\x3a\xf4\xd9\x77\x9b\x80\xcc\xe7\xea\xdb\xd6\xde\x2a\x2f\x0f\x0d\x4e\x63\x58\xb0\x86\x57\xb5\xdc\x18\xde\x0b\xa1\x3f\x70\x83\x6f\x3d\x26\x6b\x33\x2c\xd7\x97\xf5\xc3\xdd\x75\x93\x7d\x61\xac\xd2\x6a\xed\x8a\xc7\x49\x84\xc6\x85\x6e\x17\x9b\x50\x87\x53\x96\x94\xb7\x1f\x68\xd0\x5b\xed\x86\x58\xb2\x2e\x8f\x56\x0a\x74\xa6\xc7\x06\x78\xeb\x4f\x0b\xd5\x97\x9b\x5a\x87\xdb\xab\x4f\xac\xf9\xed\x0c\x82\x2a\xa8\x95\xb7\xa0\xee\x48\xae\x44\x6f\x43\x83\x68\xdf\x76\x53\xa9\x2d\xef\xda\x9a\x1f\xba\xde\x6c\x0b\x2d\x4e\x03\x07\x73\x21\xf4\xf4\x30\xab\xae\x72\x28\x68\xd3\xf2\x04\x59\xb1\x4f\xfa\x51\x2d\x63\x5b\x0f\x90\x29\x25\xbf\xd4\xb0\xc5\xe0\x28\x7f\x43\x24\x61\x01\x12\x38\x81\x41\x01\xc8\x5e\x1d\x5d\xe9\x3f\x63\x52\xe8\x86\xc8\xed\xec\x8f\xdd\x21\x3a\xa2\xdb\x35\x2e\xd3\x26\xce\x54\x36\xf7\xd4\x8b\x24\x0b\xb1\xdc\x7c\xe0\x34\x12\x8c\x6b\xf5\xe4\x9a\x06\xc7\x7d\x1e\xa2\x2f\x4a\xf0\x81\xcb\xe3\x20\xa8\xaa\xb0\xb1\x3f\x39\xf9\x37\x00\x00\xff\xff\xf0\x92\x1d\x71\x91\x1a\x00\x00")

func resourcesTBytes() ([]byte, error) {
	return bindataRead(
		_resourcesT,
		"resources.t",
	)
}

func resourcesT() (*asset, error) {
	bytes, err := resourcesTBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources.t", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _varsT = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x41\x6f\xf2\x38\x10\xbd\x7f\xbf\xc2\xca\xc5\x20\xb1\xe5\xde\x1b\x6a\x77\x5b\xd4\x5d\x60\x4b\xdb\x3d\x54\x3d\x18\x67\x12\x66\x9b\xd8\x59\x8f\x0d\x45\x88\xff\xbe\xb2\x93\x40\x42\x12\x89\x53\x4b\x3c\xef\xcd\xf3\xbc\x37\x66\x8c\xb1\x48\xa1\x5c\x88\x1c\xa2\x7b\x16\x7d\x4a\xad\xa4\xb0\xa3\x42\x18\x91\x83\x05\x43\x23\xbe\xcb\xfd\x29\x1f\x4f\x18\xff\x4d\xa1\xe4\xe3\xaf\x68\xf2\x2b\x00\x0b\xb7\xc9\x50\xce\x57\xb3\x38\x36\x40\x74\x2b\x09\x16\x0d\x0e\x45\xe9\xcd\xcd\x29\x6d\x03\xe7\x71\x80\x19\x20\xed\x8c\x84\x79\x3c\xaa\xff\x7d\x32\xda\x15\xa3\xf1\x9d\x12\x39\x4c\x18\xff\x0b\xa5\xd1\xa4\x13\x7b\xb7\x00\xbb\xd7\xe6\x7b\xaa\xca\xbf\x6b\x90\xce\xa0\x3d\x84\x7a\xe2\x13\xb6\x13\x06\xc5\x26\x03\x1a\xf1\x4a\x19\x1f\x5f\x7a\xee\x14\xd8\xb5\xdb\x28\xb0\xdd\xd6\x2d\xd5\x0a\xec\x6b\x53\xca\xf9\x12\x5d\x25\x3b\x34\xd6\x89\xac\xfa\x49\x53\x0a\xfc\x34\xe5\x13\x76\x4d\x59\xb3\x34\xbf\x97\xe5\xd7\x42\x33\x54\xee\xe7\x41\xab\x04\x53\x67\x84\x45\xad\xa2\x7b\x76\x0c\x67\x8c\x45\x31\x92\xbf\xe3\x4a\x10\xed\xb5\x89\x67\xce\x6e\x41\x59\x94\x75\x61\x64\x8d\x83\x8a\x8a\xb1\x88\x68\xeb\xd1\xc7\x27\xb0\x7f\x7a\xde\x55\xb0\xfd\x05\x0e\x74\x3a\x85\x9a\x53\xd5\x95\x50\xa5\x19\xfc\xed\xb4\x0d\x7e\xf2\x5a\xcd\x1e\x55\xac\xf7\x34\xa8\xa7\x30\x7a\x87\x84\x5a\x7d\xe4\xb3\x14\x94\x3d\x4b\x68\xb1\xc7\x28\x52\xa5\xc9\xa2\xa4\xb5\xd5\x46\xa4\x30\x93\xb5\xe0\x4f\x4c\x46\xf0\x9f\x13\x19\xb5\x7c\xd8\x68\x6d\x1f\x2f\xb0\xe0\x40\x22\x32\x2a\xbd\x50\xba\xb8\x1a\x72\x5f\x0b\xa9\x9d\xb2\x0b\xd8\x2f\xcd\xef\x3f\x48\x16\x55\x5a\x0d\xfa\x78\xc4\x84\x3d\x0b\x7a\xc3\x62\xa1\x63\x58\x03\xf9\x2b\x54\x23\x89\xc4\x4e\x60\x26\x36\x98\xa1\x3d\xac\x4b\x83\x6e\xc9\x78\x80\xad\xc1\xf2\xaa\x05\xa8\xb8\x66\xd4\xb4\x32\x3a\xc1\x0c\x9a\xa3\x93\x3a\x2f\x9c\x05\xa3\x6a\xfe\x3e\xe2\xaf\x8b\x97\x22\xce\x51\xbd\xd3\x00\xa0\x75\xda\xc5\xd5\x81\xe9\xc7\xd5\xa7\xfc\x32\x9d\x39\x85\xc0\xb0\xbb\xea\x0e\x43\xc9\x1c\xf2\x4f\xb4\x92\xf9\x76\x28\xca\x29\x15\xe7\x4e\x13\xf6\x2f\x69\x35\xe2\xca\x65\x99\xff\xd5\x58\xdf\x6e\xa3\xe0\x9b\x9f\x69\x46\x70\x11\x34\x10\xce\xe8\xb3\xc1\xd5\x57\xc3\x2b\xb2\xb3\x41\xe7\x2d\x28\x93\xd3\x34\x2b\x0c\x43\x69\xeb\xe3\x32\xb3\x56\xc8\x2d\xc4\x4b\x7a\x44\xfa\xbe\xe8\xc0\x5c\xa4\xf0\x0a\x09\x18\x50\xb2\x01\x7b\x16\xf4\xe0\xc8\xea\x7c\x49\x73\x5f\x72\x46\x78\x4c\xe7\x15\x6a\x3c\x30\x0f\x65\x34\xa6\x81\x98\xf8\x84\x97\x34\x81\x84\xf7\x4c\xa2\x7e\xd0\x69\x0b\xa6\xe3\xb0\x2e\x9b\xaf\xea\x82\x66\x38\x7c\x36\x93\x64\x18\xb4\xf4\x87\x57\x00\xfa\x76\x43\xe5\xeb\x97\xf7\xab\xe2\x1d\x18\xaa\x5d\xe9\x01\x7c\x94\xc7\x1d\x43\x82\x25\xed\x0f\xe1\x11\x7b\x14\x56\xf8\xd9\x53\x33\x97\x3a\xd8\xd1\x58\x2d\xbf\x5c\x42\x6e\x51\xa5\xbe\xef\x2b\x88\xf8\x1f\x83\x16\x1a\x8b\x3f\xe0\x64\x20\xf3\x59\xed\xd1\x5b\x46\xb8\x75\x39\x69\x40\x58\x58\x16\x75\xee\x4a\xd6\x66\x45\x2e\x94\x48\x21\xee\xe8\xbb\x35\x00\xb1\xbf\xeb\xd9\x7f\x4f\x13\x46\x55\x93\x9c\x7a\x82\x70\x2d\xea\x0f\x53\x05\xe7\x46\x5d\xd4\x7a\x3d\x07\x86\xe1\x81\xf5\x40\xda\x6a\x9a\x16\x96\xbb\xf5\xeb\xff\x00\x00\x00\xff\xff\x5f\x09\xf8\xbc\xaa\x08\x00\x00")

func varsTBytes() ([]byte, error) {
	return bindataRead(
		_varsT,
		"vars.t",
	)
}

func varsT() (*asset, error) {
	bytes, err := varsTBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vars.t", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"base.t":      baseT,
	"outputs.t":   outputsT,
	"params.t":    paramsT,
	"resources.t": resourcesT,
	"vars.t":      varsT,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"base.t":      {baseT, map[string]*bintree{}},
	"outputs.t":   {outputsT, map[string]*bintree{}},
	"params.t":    {paramsT, map[string]*bintree{}},
	"resources.t": {resourcesT, map[string]*bintree{}},
	"vars.t":      {varsT, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
